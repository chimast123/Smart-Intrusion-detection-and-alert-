#include <esp32cam.h>

/* Fill-in information from Blynk Device Info here */
#define BLYNK_TEMPLATE_ID           "id"
#define BLYNK_TEMPLATE_NAME         "Quickstart Template"
#define BLYNK_AUTH_TOKEN            "token"

/* Comment this out to disable prints and save space */
#define BLYNK_PRINT Serial

#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>

// Your WiFi credentials.
// Set password to "" for open networks.
char ssid[] = "CHI";
char pass[] = "password";

// PIR sensor pin and buzzer pin
#define PIR_PIN 14
#define BUZZER_PIN 13

// Function declarations
void capturePhoto();
void soundBuzzer();
void silenceBuzzer();

void setup() {
  Serial.begin(115200);

  // Connect to WiFi
  WiFi.begin(ssid, pass);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Initialize Blynk
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);
  Serial.println("Connected to Blynk");

  pinMode(BUZZER_PIN, OUTPUT);
}

void loop() {
  Blynk.run();

  int motionDetected = digitalRead(PIR_PIN);

  if (motionDetected == HIGH) {
    capturePhoto();
    soundBuzzer(); // Sound the buzzer when intrusion is detected
    delay(5000);
    silenceBuzzer(); // Silence the buzzer
  }
}

void capturePhoto() {
  camera_fb_t *fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("Camera capture failed");
    return;
  }

  Blynk.virtualWrite(V0, reinterpret_cast<const char*>(fb->buf), fb->len); // Send the image data directly
  
  esp_camera_fb_return(fb);
}

void soundBuzzer() {
  digitalWrite(BUZZER_PIN, HIGH); // Turn on the buzzer
}

void silenceBuzzer() {
  digitalWrite(BUZZER_PIN, LOW); // Turn off the buzzer
}
